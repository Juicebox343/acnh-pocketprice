{"version":3,"sources":["Collection.js","FilterBtns.js","SearchForm.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Collection","handleClick","key","props","addToPocket","index","creatureName","this","details","name","price","className","React","Component","FilterBtns","e","selectedCreature","target","value","ref","filterRef","onClick","SearchForm","state","pocket","filter","filterToggle","setState","searchRef","type","placeholder","onChange","searchBar","filtertoggle","Header","App","selectedCreatures","search","event","keyword","mappedFish","Object","keys","fishesData","map","fish","toLowerCase","indexOf","mappedBugs","bugsData","bugs","searchMe","toUpperCase","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7f9a9f8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Collection extends React.Component{\r\n \r\n    handleClick = (key) =>{\r\n\r\n      this.props.addToPocket(this.props.index)\r\n    }\r\n\r\n    \r\n  \r\n    render(){\r\n      // const index = this.props.details.index;\r\n      const creatureName = this.props.details.name['name-en'];\r\n      const price = this.props.details.price;    \r\n      \r\n      return(\r\n        <li className='creature-data'>\r\n          <div className='headline-data'>\r\n            <h3>{creatureName}</h3> <span className='cost'>{price} Bells</span> \r\n          </div>\r\n\r\n        </li>\r\n      )\r\n  }\r\n}\r\n  export default Collection;\r\n  \r\n/* <button className='add-to-pocket' value={index} onClick={this.handleClick}>+</button>  */","import React from 'react';\r\n\r\nclass FilterBtns extends React.Component{\r\n    \r\n    handleClick = (e) =>{\r\n        this.props.selectedCreature(e.target.value);\r\n    }\r\n\r\n    render(){\r\n      return(\r\n        <div className='filter-buttons' ref={this.filterRef}>\r\n            <button value='bugs' onClick={this.handleClick}>I'm looking for bugs!</button>\r\n            <button value='fishes' onClick={this.handleClick}>Show me the fishes!</button>\r\n        </div>\r\n       \r\n      )\r\n  }\r\n}\r\n\r\n  export default FilterBtns;\r\n  \r\n","import React from 'react';\r\nimport FilterBtns from './FilterBtns';\r\n// import Pocket from './Pocket';\r\n\r\nclass SearchForm extends React.Component{\r\n\r\n    state = {\r\n        pocket: false,\r\n        filter: false\r\n    }\r\n\r\n    filterToggle = () =>{\r\n        if (!this.state.filter){\r\n            this.setState({filter: true})\r\n        } else {\r\n            this.setState({filter: false})\r\n        }\r\n    }\r\n\r\n    // pocketToggle = () =>{\r\n    //     if (!this.state.pocket){\r\n    //         this.setState({pocket: true})\r\n    //     } else {\r\n    //         this.setState({pocket: false})\r\n    //     }\r\n    // }\r\n    \r\n    render(){\r\n        return(\r\n            <div className='searchForm' ref={this.searchRef}>      \r\n                <div className='main-search'>\r\n                    <input name='search' type='text' placeholder='Search..' onChange={(e)=>this.props.searchBar(e)} />\r\n                    <button onClick={this.filterToggle}>Filters</button>\r\n                    {/* <button onClick={this.pocketToggle}>Pocket</button> */}\r\n                </div>\r\n                {/* {this.state.pocket && <Pocket loadedCreatures={this.props.loadedCreatures} pocket={this.props.pocket}/> } */}\r\n                {this.state.filter && <FilterBtns selectedCreature={this.props.selectedCreature} filtertoggle={this.filterToggle}/> }\r\n                \r\n                \r\n                \r\n                \r\n                \r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchForm;\r\n  \r\n//   <div className='searchPrelude'>\r\n//                     <span>I'm looking for..</span>\r\n//                     <button value='bugs' onClick={this.handleClick}>Bugs</button>\r\n//                     <button value='fishes' onClick={this.handleClick}>Fishes</button>\r\n//                 </div>\r\n                \r\n//                 <div>\r\n//                     <span>In the..</span>\r\n//                     <button value='north'>Northern Hemisphere</button>\r\n//                     <button value='south'>Southern Hemisphere</button>\r\n//                 </div>\r\n\r\n// filterToggle = () =>{\r\n//     const searchWrapper = this.searchRef.current;\r\n//     const filterWrapper = this.filterRef.current;\r\n   \r\n//     if (searchWrapper.classList.contains('filter-open')){\r\n//         searchWrapper.classList.remove('filter-open');\r\n//     } else {\r\n//         searchWrapper.classList.add('filter-open');\r\n//     }\r\n\r\n//     if (filterWrapper.classList.contains('hide-me')){\r\n//         filterWrapper.classList.remove('hide-me');\r\n//     } else {\r\n//         filterWrapper.classList.add('hide-me');\r\n//     }","import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Collection from './Collection'\nimport SearchForm from './SearchForm'\nimport bugsData from './bugs.json';\nimport fishesData from './fishes.json';\nimport Header from './Header';\n\n\nclass App extends React.Component{\n  state = {\n    pocket: {},\n    selectedCreatures: 'fishes',\n    search: ''\n  }\n\n  searchBar=(event)=>{\n    let keyword = event.target.value;\n    this.setState({search:keyword})\n  }\n\n  // addToPocket = (key) =>{\n  //   const pocket = {...this.state.pocket};\n  //   pocket[key] = pocket[key] + 1 | 1;\n  //   this.setState({pocket: pocket})\n  // }\n  \n  selectedCreature = (e) => {\n    this.setState({selectedCreatures: e})\n  }\n\n  render(){ \n    const mappedFish = Object.keys(fishesData).map(key => {\n      return fishesData[key]\n    })\n    .filter(fish => fish['name']['name-en'].toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1)\n   \n    const mappedBugs = Object.keys(bugsData).map(key => {\n      return bugsData[key]\n    })\n    .filter(bugs => bugs['name']['name-en'].toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1)\n\n    const searchMe = () =>{\n      if(this.state.selectedCreatures === 'fishes'){\n        return mappedFish;\n      } else if (this.state.selectedCreatures === 'bugs'){\n        return mappedBugs;\n      }\n    }\n\n     return(\n      <div>\n        <Header/>\n        <SearchForm searchBar={this.searchBar} selectedCreature={this.selectedCreature}/>\n        <ul className='creature-list'>       \n        <h2>{this.state.selectedCreatures[0].toUpperCase() +  \n            this.state.selectedCreatures.slice(1)}</h2>  \n         {Object.keys(searchMe()).map(key => \n              <Collection \n                  key={key} \n                  index={key}\n                  details={searchMe()[key]} \n                  // addToOrder={this.addToPocket}\n              />\n            )}\n        </ul>\n      </div>\n      \n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}